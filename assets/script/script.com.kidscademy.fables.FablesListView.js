$package("com.kidscademy.fables");

/**
 * Fables list view is a more compact alternative of fables grid. It displays section fables into a vertical list.
 * 
 * @author Iulian Rotaru
 * @since 1.0
 * 
 * @constructor Construct an instance of FablesList class.
 * @param js.dom.Document ownerDoc element owner document,
 * @param Node node native {@link Node} instance.
 * @assert assertions imposed by {@link js.dom.Element#Element(js.dom.Document, Node)}.
 */
com.kidscademy.fables.FablesListView = function(ownerDoc, node) {
	this.$super(ownerDoc, node);

	/**
	 * Fable descriptors list.
	 * 
	 * @type Array
	 */
	this._descriptors = null;

	/**
	 * List item views.
	 * 
	 * @type js.dom.EList
	 */
	this._itemViews = null;

	/**
	 * Current list item.
	 * 
	 * @type Number
	 */
	this._itemIndex = 0;

	/**
	 * Reference to fable view bound to parent section. When this fables list gets the focus it takes over control of
	 * the fable view: open, update and close operations.
	 * 
	 * @type com.kidscademy.fables.FableView
	 */
	this._fableView = null;

	/**
	 * Custom events generated by this fables list. Current implementation supports only <code>close</code> event
	 * triggered just after this fables list is closed by escape key.
	 * 
	 * @type js.event.CustomEvents
	 */
	this._events = this.getCustomEvents();
	this._events.register("close");

	var eventManager = WinMain.page.getEventManager();
	eventManager.on("click", this._onClick, this);
	eventManager.on("key-enter", this._onKeyEnter, this);
	eventManager.on("key-escape", this._onKeyEscape, this);
	eventManager.on("key-up", this._onKeyUp, this);
	eventManager.on("key-down", this._onKeyDown, this);

	// synthetic events manager uses event delegation
	// this means that a focused element may be processed by a listener registered to an ancestor
	// SectionViewGroup uses key-left and key-right to move between sections and all focusable descendants will
	// 'inherit' this handler; if not desirable need to disable it with NOP handlers
	// alternative methods may be no-event CSS class - see sample code, or limit delegation to direct parent
	// this.addCssClass("no-key-left", "no-key-right");

	eventManager.on("key-left", this._onKeyLeft, this);
	eventManager.on("key-right", this._onKeyRight, this);
};

com.kidscademy.fables.FablesListView.prototype = {
	/**
	 * CSS class that mark opened fables list.
	 * 
	 * @type String
	 */
	_CSS_OPENED : "opened",

	/**
	 * CSS class that mark closed fables list.
	 * 
	 * @type String
	 */
	_CSS_CLOSED : "closed",

	/**
	 * Set fable view reference.
	 * 
	 * @param com.kidscademy.fables.FableView fableView fable view reference.
	 */
	setFableView : function(fableView) {
		this._fableView = fableView;
	},

	/**
	 * Create fables list item views using given fable descriptors list. Initialize item views and current item index.
	 * 
	 * @param Array descriptors fable descriptors list.
	 */
	setDescriptors : function(descriptors) {
		this._descriptors = descriptors;
		descriptors.forEach(function(descriptor) {
			descriptor.icon = com.kidscademy.fables.DataSource.getFableIconURL(descriptor.name);
		}, this);
		this.setObject(descriptors);
		this._itemViews = this.getChildren();
		this._itemIndex = 0;
	},

	/**
	 * Open fables list and, if requested, move it to viewport left side then set the focus on first item.
	 * 
	 * @param Boolean move true to move fables list to viewport left side.
	 */
	open : function(move) {
		if (move) {
			WinMain.doc.getByClass(com.kidscademy.fables.SectionViewGroup).moveX(this.style.getClientRect().left);
		}
		this.addCssClass(this._CSS_OPENED).removeCssClass(this._CSS_CLOSED);
		this._itemIndex = 0;
		this._update();
	},

	/**
	 * Return true if fables list is opened.
	 * 
	 * @return Boolean true if fables list is opened.
	 */
	isOpened : function() {
		return this.hasCssClass(this._CSS_OPENED);
	},

	/**
	 * Close fables list. If fables list is already closed this method does nothing.
	 */
	close : function() {
		this.addCssClass(this._CSS_CLOSED).removeCssClass(this._CSS_OPENED);
	},

	/**
	 * Callback invoked by fable view when loose focus.
	 */
	onFableClose : function() {
		var rect = this.style.getClientRect();
		// using WinMain.doc.getByCssClass(js.widget.Panorama) results in circular dependency
		WinMain.doc.getByCssClass("js-panorama").moveX(rect.left);
		this._update();
	},

	/**
	 * Open fable view with content described by list item on which click event occurs.
	 * 
	 * @param js.dom.Event ev mouse click event.
	 */
	_onClick : function(ev) {
		var itemView = ev.target.getParentByCssClass("item");
		itemView.setFocus();
		var fableName = itemView.getAttr("data-fable");
		this._fableView.open(fableName, this);
	},

	_onKeyEnter : function(ev) {
		if (!this._fableView.isOpened()) {
			var fableName = this._descriptors[this._itemIndex].name;
			this._fableView.open(fableName, this);
		}
		else {
			this._fableView.setFocus();
		}
		return true;
	},

	_onKeyEscape : function(ev) {
		if (this._fableView.isOpened()) {
			this._fableView.close();
		}
		else {
			this.close();
			this._events.fire("close");
		}
		return true;
	},

	_onKeyUp : function(ev) {
		if (this._itemIndex > 0) {
			--this._itemIndex;
		}
		this._update();
		return true;
	},

	_onKeyDown : function(ev) {
		if (this._itemIndex < this._itemViews.size() - 1) {
			++this._itemIndex;
		}
		this._update();
		return true;
	},

	_update : function() {
		this._itemViews.item(this._itemIndex).setFocus();
		if (this._fableView.isOpened()) {
			var fableName = this._descriptors[this._itemIndex].name;
			this._fableView.open(fableName, this);
		}
	},

	_onKeyLeft : function(ev) {
		return true;
	},

	_onKeyRight : function(ev) {
		return true;
	},

	/**
	 * Class string representation.
	 * 
	 * @return this class string representation.
	 */
	toString : function() {
		return "com.kidscademy.fables.FablesListView";
	}
};
$extends(com.kidscademy.fables.FablesListView, js.dom.Element);
$implements(com.kidscademy.fables.SectionView, com.kidscademy.fables.FableCloseListener);
